/*
Mas informacion
https://www.w3.org/TR/css-2020/
https://cssreference.io/
https://caniuse.com/
*/

/*
---------------------------- Sintaxis básica
Regla CSS consta de 2 partes
1) El selector
2) Bloque de declaraciones: {
    atributo: valor;
    atributo-de-mas-dos-palabras: otro-valor
}
*/

/* Son mala practica porque son bloqueantes a la hora de que el navegador lee esta instruccion */
/* @import url("./css/otro-hoja.css"); */
html {
  scroll-behavior: smooth;
}

h1 {
  color: orangered;
  background-color: skyblue;
  text-align: center;
}

/*
------------------------------------------- 1. Selectores Basicos, Etiquetas, Identificadores y Clases
Selectores Basicos
  1) Etiquetas - Son elementos html
  2) Identificadores - atributo id - #
  3) Clases - atributo class - .
*/

/* Dar estilos con Id se considera un AntiPatrón o mala practica */
#parrafo-dos {
  background-color: skyblue;
}

/* Dar estilos con clases nor permite reutilizar nuestro codigo CSS */
.bg-skyblue {
  background-color: skyblue;
}

.bg-steelblue {
  background-color: steelblue;
}

.text-20 {
  font-size: 20px;
}

.text-32 {
  font-size: 32px;
}

.text-white {
  color: white;
}

/*
------------------------------------------- 2. Selectores Avanzados
*/
/* Para Aplicar estilo a Hijos Directos */
.hijos-directos > li {
  background-color: thistle;
}

/* Para aplicar estilo a sus Hijos Descendientes */
.hijos-descendientes b {
  background-color: thistle;
}

/*Los selectores de hermanos van a aplicar a los elementos 
que son hermanos y que esten por debajo del elemento de referencia*/
.hermanos-general ~ li {
  background-color: thistle;
}

.hermanos-adyacentes + li {
  background-color: thistle;
}

/* Selectores de Atributo */
.selectores-atributos a[href] {
  color: orangered;
}

.selectores-atributos a[target="_blank"] {
  font-weight: bold;
}

/* El comodin del * aplica el estilo si contiene el texto 
en cuestión en cualquier parte */
.selectores-atributos a[href*="jonmircha"] {
  font-size: 24px;
}

/* El comodin del ^ aplica el estilo si contiene el texto en cuestión al inicio */
.selectores-atributos a[href^="http:"] {
  text-decoration: none;
}

/* El comodin del $ aplica el estilo si contiene el texto en cuestión al final */
.selectores-atributos a[href$=".com"] {
  background-color: black;
}

/* El comodin del ~ aplica el estilo si contiene el texto en cuestión en una lista 
separada por espacios */
.selectores-atributos a[class~="cursos"] {
  background-color: steelblue;
}

/* El comodin del | aplica el estilo si contiene el texto en cuestión en una lista 
separada por espacios y que despues del texto en cuestion venga un - */
.selectores-atributos a[class|="menu"] {
  font-style: italic;
}

/* Selector Universal => aplica estilos a todos los elementos de HTML */
* {
  font-family: sans-serif;
}

.selector-universal * {
  font-size: 24px;
}

/*
------------------------------------------- 3. Pseudoclases
*/
/*
Link => https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes
Los Pseudoclases dan estilos dependiendo del contexto, posicion o estado del elemento.
*/

.form-pseudoclases *:required {
  border-color: yellow;
}

.form-pseudoclases *:valid {
  border-color: green;
}

.form-pseudoclases *:invalid {
  border-color: red;
}

.form-pseudoclases *:focus {
  background-color: skyblue;
}

.form-pseudoclases *:disabled {
  background-color: pink;
}

.menu-pseudoclases a:visited {
  color: olive;
}

.menu-pseudoclases a:hover {
  color: orange;
}

.p-pseudoclases:hover {
  font-size: 20px;
}

#temario-css:target {
  background-color: lightblue;
}

.lista-pseudoclases li:first-child {
  color: green;
}

.lista-pseudoclases li:last-child {
  color: violet;
}

.lista-pseudoclases li:nth-child(3) {
  color: navy;
}

/* va a aplicar 4 en 4 */
.lista-pseudoclases li:nth-child(4n) {
  font-size: 20px;
}

.lista-pseudoclases li:nth-child(3n + 1) {
  font-weight: bold;
}

/* Aplica a estilos Pares */
.lista-pseudoclases li:nth-child(even) {
  background-color: yellow;
}

/* Aplica a estilos Impares */
.lista-pseudoclases li:nth-child(odd) {
  background-color: orange;
}

.articulo-pseudoclases p:first-of-type {
  background-color: pink;
}

.articulo-pseudoclases p:last-of-type {
  background-color: violet;
}

.articulo-pseudoclases p:nth-of-type(3) {
  background-color: fuchsia;
}

.articulo-pseudoclases *:not(p) {
  background-color: beige;
}

/*
------------------------------------------- 4. Pseudo Elementos
*/
/*
Pseudoelementos - Dan estilos a partes especificas de un elemento, se usa el :: para
diferenciar de las pseudoclases

link => https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements
*/

.saga-geminis::before {
  content: "⛹️‍♀️";
}

.saga-geminis::after {
  content: "👨‍🦳";
}

.saga-precio::before {
  content: "$";
  font-weight: bold;
}

.saga-precio::after {
  content: "USD";
  font-weight: bold;
}

.p-pseudoelementos::first-letter {
  font-weight: bold;
  font-size: 32px;
}

.p-pseudoelementos::first-line {
  color: coral;
}

.p-pseudoelementos::selection {
  color: greenyellow;
  background-color: black;
}

.input-pseudoelementos::placeholder {
  color: blueviolet;
}

/*
------------------------------------------- 5. Agrupar Selectores
*/
.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea {
  border-color: blue;
  background-color: blanchedalmond;
  font-size: 20px;
  display: block;
  width: 300px;
  border-width: 2px;
}

/*
------------------------------------------- 6. El Algoritmo de CSS
*/
/* 
El algoritmo de CSS: Es la forma en que el navegador aplica los estilos al documento
HTML. Es vital entender este concepto para que entiendas como se aplica y en algunas
ocasiones se sobreescriben las reglas CSS.
1) La Cascada.
2) La Especificidad.
3) La Herencia

La cáscada es el mecanismo en que el navegador aplica los estilos. Y toma en cuenta lo
siguiente en este orden:
  1) El origen del codigo:
    - El User Agent (los estilos por defecto del navegador)
    - Personalizaciones del usuario.
    - Los estilos del autor.
  2) La especificidad del Selector.
  3) Orden de Aparicion.


La especificidad es el peso que tiene un selector cuando hay conflicto de estilos.
Se calcula de la siguiente manera:
  Etiquetas y pseudoelementos ........................ 0,0,0,1
  Clases, atributos y pseudoclases ................... 0,0,1,0
  Identificadores .................................... 0,1,0,0
  Estilos en linea ................................... 1,0,0,0
  !important ......................................... Rompe la especificidad


La Herencia, es la capacidad de un selector de obtener (heredar) lo valores de sus
ancestros mas cercanos, para aplicarla se usa el valor inherit, si queremos evitarla
podemos asignar otro valor o inicializar la propiedad en cuestion con el valor initial.
todos los tipografias se heredan automaticamente, los colores no, entre otros

mas informacion => https://web.dev/learn/css/inheritance/#which-properties-are-inheritable
*/

blockquote#cita-marco.cita-marco {
  background-color: lightsteelblue;
}

blockquote {
  background-color: burlywood;
}

#cita-marco {
  background-color: lightgreen;
}

/* Aplica estilo al elemento blockquote y que tenga un class de cita marco  */
blockquote.cita-marco {
  background-color: tomato;
}

.cita-marco {
  background-color: cornflowerblue;
}

.cita-marco {
  background-color: mediumaquamarine !important;
}

blockquote#cita-marco {
  background-color: lightsalmon;
}

.cita-marco {
  background-color: darkorange !important;
  font-size: 32px;
  border-style: dotted;
  border-color: red;
}

/* Herencia */
.cita-marco cite {
  background-color: pink;
  background-color: inherit;
  font-size: 24px;
  font-size: initial;
  border-style: inherit;
  border-color: inherit;
}

/*
------------------------------------------- 8. Prefijos de los navegadores
*/
/*
Link
- https://caniuse.com/
- https://autoprefixer.github.io/

Prefijos de los navegadores
-webkit-user-select: none;
-moz-user-select: none;
-ms-user-select: none;
user-select: none;
*/

/*
------------------------------------------- 9. Modelo de Caja
*/
